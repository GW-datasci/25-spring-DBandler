---
title: "Diabetes"
format: html
editor: visual
---

Week updates: I updated my Code, integrated BRFSS data and plotted synthetic controls. I intend to improve that model, so far results seem insignificant.

```{r}
library(tidyverse)
library(Synth)
obesity <- read_csv("~/Downloads/DataSciCapstoneDataset - Sheet1-2.csv")
```

# ```{r}
# ggplot(obesity, aes(x = Year, y = median_age, color = Treatment)) +
#   geom_point() +
#   geom_smooth(method = "lm", se = FALSE) +  
#   labs(
#     title = "Median Age Trends by County (Linear Regression)",
#     x = "Year",
#     y = "Median Age"
#   ) +
#   theme_minimal()
# ```

```{r}
#obesity <- obesity %>% filter(Year >= 2008)
obesity$Post <- ifelse(obesity$Year >= 2017, 1, 0) 


did_model <- lm((Obesity) ~ Post * Treatment +factor(Year)+ factor(County), data = obesity) 



obesity$Diabetes <- obesity$Diabetes / 100
did_model2 <- lm((Diabetes) ~ Post * Treatment +factor(Year)+ factor(County), data = obesity) 



library("lmtest")
library("sandwich")

TestCount <- coeftest(did_model, vcov = vcovHAC(did_model))
TestCount

TestCount2 <- coeftest(did_model2, vcov = vcovHAC(did_model2))
TestCount2

```
```{r}

obesity <- obesity %>%
  mutate(event_time = Year - 2017) 

obesity <- obesity %>%
  mutate(event_time_factor = factor(event_time))

did_event_model <- lm(Obesity ~ Treatment * event_time_factor + factor(County) + factor(Year), data = obesity)
did_event_model

library(broom)


event_study_df <- tidy(did_event_model) %>%
  filter(grepl("Treatment:event_time_factor", term)) %>% mutate(year = as.numeric(gsub(".*event_time_factor", "", term)))


ggplot(event_study_df, aes(x = year, y = estimate)) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(
    title = "Lagged Effects of Sugar Tax on Obesity",
    x = "Years Since Treatment (event time)",
    y = "Estimated Treatment Effect",
    subtitle = "95% Confidence Intervals",
    caption = "CDC Data"
  ) +
  geom_errorbar(aes(
    ymin = estimate - 1.96 * std.error,
    ymax = estimate + 1.96 * std.error
  ), width = 0.2) + theme_minimal() + geom_vline(xintercept = 0, color = "red")

```

```{r}

summary_df <- obesity %>%
  group_by(Year, Treatment) %>%
  summarise(
    mean_obesity = mean(Obesity, na.rm = TRUE)
  )

summary_df$Post <- ifelse(summary_df$Year >= 2017, 1, 0) 

ggplot(summary_df, aes(x = Year, y = mean_obesity, color = Treatment, group = Treatment)) +
  geom_line() +
  labs(
    title = "Difference-in-Differences: Obesity Trends",
    subtitle = "Philly vs Control Mean",
    caption = "CDC Data",
    y = "Obesity Rate",
    x = "Year",
    color = "Group"
  ) +
  theme_minimal() +geom_vline(xintercept = 2017)


ggplot(summary_df, aes(x = Year, y = (mean_obesity), color = Treatment)) +
  geom_smooth(method = "lm", aes(linetype = factor(Post)), se = FALSE)  +theme_minimal() +geom_vline(xintercept = 2019) + geom_line() +
  labs(
    title = "Difference-in-Differences: Obesity Trends",
    subtitle = "Philly vs Control Mean",
    caption = "CDC Data",
    y = "Obesity Rate",
    x = "Year",
    linetype = "Before/After") 


# summary_df <- obesity %>%
#   group_by(Year) %>%
#   summarise(
#     mean_obesity = mean(Obesity, na.rm = TRUE),
#     mean_diabetes = mean(Diabetes, na.rm=TRUE)
#   )
# 
# summary_df <- summary_df %>% filter(Year <=2017)
# ggplot(summary_df, aes(x = Year, y = mean_obesity)) +geom_line(aes(color = "red")) +theme_minimal() + labs(title = "Average Obesity per Year in Sample Counties", subtitle = "2004-2017", x = "Obesity Rate", y = "Year", caption = "CDC Data")
# ggplot(summary_df, aes(x = Year, y = mean_diabetes)) +geom_line(aes(color = "red")) +theme_minimal() + labs(title = "Average Diabetes Rate per Year in Sample Counties", subtitle = "2004-2017", x = "Diabetes Rate", y = "Year", caption = "CDC Data")
```


```{r}

obesity %>%
  mutate(
    Post = ifelse(Year >= 2017, 1, 0)
  ) %>%
  group_by(Treatment, Post) %>%
  summarize(
    mean_obesity = mean(Obesity, na.rm = TRUE),
    sd_obesity = sd(Obesity, na.rm = TRUE),
    mean_diabetes = mean(Diabetes, na.rm = TRUE),
    sd_diabetes = sd(Diabetes, na.rm = TRUE),
    n = n(),
    .groups = "drop"
  )
  



```
```{r}
# counties <- read_csv("~/Downloads/Maryland2020.csv")
# counties2023 <- read_csv("~/Downloads/Maryland2023.csv")
# counties <- counties %>% filter(COUNTY %in% c("510")) %>% filter(YEAR >= 4) %>% filter(YEAR != 13) %>%  mutate(YEAR = ifelse(YEAR == 14, 13, YEAR)) %>%
#   mutate(YEAR = YEAR + 2007)
# counties2023 <- counties2023 %>% filter(COUNTY %in% c("510"))  %>% filter(YEAR >= 3) %>%
#   mutate(YEAR = YEAR + 2018)
# 
# counties <- bind_rows(counties, counties2023)
# 
# counties <- counties %>%
#   mutate(
#     under_18 = UNDER5_TOT + AGE513_TOT + AGE1417_TOT,
#     over_64 = AGE65PLUS_TOT,
#     working_age = POPESTIMATE - under_18 - over_64,
#     age_dependency_ratio = ((under_18 + over_64) / working_age) * 100
#   ) %>%
#   mutate(
#     child_dependency_ratio = (under_18 / working_age) * 100
#   ) %>%
#   mutate(
#     old_age_dependency_ratio = (over_64 / working_age) * 100
#   )
# median_age_by_county <- counties %>% 
#   group_by(CTYNAME, YEAR) %>%
#   summarise(
#     median_age = median(MEDIAN_AGE_TOT, na.rm = TRUE),
#     .groups = "drop"
#   )
# 
# print(median_age_by_county)

```

My county list: NY: New York County, Bronx, Kings, Queens NJ: Hudson, Essex Pennsylvania: Philadelphia Massachusetts: Suffolk Maryland: Baltimore City



```{r}

library(Synth)


df <- read_csv("~/Downloads/DataSciCapstoneDataset - Sheet1-2.csv") %>%
  mutate(unit_id = as.numeric(as.factor(County))) %>%
  select(unit_id, County, Year, Income_Per_Cap, Obesity, median_age, PoorFairHealth) %>%
  filter(!is.na(Obesity), !is.na(Income_Per_Cap), !is.na(median_age), !is.na(PoorFairHealth)) %>%
  as.data.frame()


philly_id <- df %>% filter(County == "Philadelphia") %>% pull(unit_id) %>% unique()
control_ids <- df %>% filter(County != "Philadelphia") %>% pull(unit_id) %>% unique()


dataprep_out <- dataprep(
  foo = df,
  predictors = c("median_age","Income_Per_Cap", "PoorFairHealth"),
  dependent = "Obesity",
  unit.variable = "unit_id",
  time.variable = "Year",
  treatment.identifier = philly_id,
  controls.identifier = control_ids,
  time.predictors.prior = 2011:2016,
  time.optimize.ssr = 2011:2016,
  time.plot = 2011:2021
)


synth_out <- synth(dataprep_out)


path.plot(
  synth.res = synth_out,
  dataprep.res = dataprep_out,
  Ylab = "Obesity Rate",
  Xlab = "Year",
  Legend = c("Philadelphia", "Synthetic Control"),
  Legend.position = "bottomright",
  Main = "Obesity, Synthetic Control"
)
abline(v = 2017, lty = 2, col = "red", lwd = 2)


gaps.plot(
  synth.res = synth_out,
  dataprep.res = dataprep_out,
  Ylab = "Gap (Philadelphia - Synthetic Control)",
  Xlab = "Year",
  Main = "Gap in Obesity Rate Over Time",
)


abline(v = 2017, lty = 2, col = "red", lwd = 2)

df %>%
  filter(County != "Philadelphia") %>%
  distinct(unit_id, County) %>%
  arrange(unit_id)




```

```{r}

df_diff <- df %>%
  arrange(unit_id, Year) %>%
  group_by(unit_id) %>%
  mutate(
    dObesity = Obesity - lag(Obesity)
  ) %>%
  filter(!is.na(dObesity)) %>%
  ungroup()

df_diff <- df_diff %>%
  mutate(
    Treated = ifelse(County == "Philadelphia", 1, 0),
    Post = ifelse(Year >= 2017, 1, 0)
  )
did_model_diff <- lm(dObesity ~ Treated * Post + factor(County) + factor(Year), data = df_diff)

summary(did_model_diff)
```

```{r}


df <- read_csv("~/Downloads/DataSciCapstoneDataset - Sheet1-2.csv") %>%
  mutate(unit_id = as.numeric(as.factor(County))) %>%
  select(unit_id, County, Year, Income_Per_Cap, Diabetes, median_age, PoorFairHealth) %>%
  filter(!is.na(Diabetes), !is.na(Income_Per_Cap), !is.na(median_age), !is.na(PoorFairHealth)) %>%
  as.data.frame()


philly_id <- df %>% filter(County == "Philadelphia") %>% pull(unit_id) %>% unique()
control_ids <- df %>% filter(County != "Philadelphia") %>% pull(unit_id) %>% unique()


dataprep_out <- dataprep(
  foo = df,
  predictors = c("median_age","Income_Per_Cap", "PoorFairHealth"),
  dependent = "Diabetes",
  unit.variable = "unit_id",
  time.variable = "Year",
  treatment.identifier = philly_id,
  controls.identifier = control_ids,
  time.predictors.prior = 2011:2016,
  time.optimize.ssr = 2011:2016,
  time.plot = 2011:2021
)


synth_out <- synth(dataprep_out)


path.plot(
  synth.res = synth_out,
  dataprep.res = dataprep_out,
  Ylab = "Diabetes Rate",
  Xlab = "Year",
  Legend = c("Philadelphia", "Synthetic Control"),
  Legend.position = "bottomright",
  Main = "Diabetes, Synthetic Control"
)
abline(v = 2017, lty = 2, col = "red", lwd = 2)

gaps.plot(
  synth.res = synth_out,
  dataprep.res = dataprep_out,
  Ylab = "Gap (Philadelphia - Synthetic Control)",
  Xlab = "Year",
  Main = "Gap in Diabetes Rate Over Time",
)


abline(v = 2017, lty = 2, col = "red", lwd = 2)
```
```{r}
library(janitor)
brfss <- read_csv("~/Downloads/Behavioral_Risk_Factors__Selected_Metropolitan_Area_Risk_Trends__SMART__MMSA_Age-adjusted_Prevalence_Data__2011_to_Present__20250414.csv") 
brfss_nat <- brfss

brfss <- brfss %>%
  clean_names() %>%
  mutate(year = as.integer(year),
         locationdesc = str_trim(locationdesc))

#Have some form of sugar tax, not properly controls
excluded_divisions <- c(
  "Philadelphia, PA Metropolitan Division",
  "San Francisco-Redwood City-South San Francisco, CA Metropolitan Division",
  "Oakland-Hayward-Berkeley, CA Metropolitan Division",
  "Seattle-Bellevue-Everett, WA Metropolitan Division",
  "Washington-Arlington-Alexandria, DC-VA-MD-WV Metropolitan Division",
  "Boulder, CO Metropolitan Division"
)




brfss_divisions <- brfss %>%
  filter(str_detect(locationdesc, "Division"))
treated_mmsa <- "Philadelphia, PA Metropolitan Division"

brfss_division_filtered <- brfss_divisions %>%
  filter(year >= 2011) %>%
  mutate(treated = if_else(locationdesc == treated_mmsa, 1, 0),
         post = if_else(year >= 2017, 1, 0))
```

```{r}
obesity_df <- brfss_division_filtered %>%
  filter(
    question == "Weight classification by Body Mass Index (BMI) (variable calculated from one or more BRFSS questions)",
    response == "Obese (BMI 30.0 - 99.8)",
    break_out == "Overall"
  ) %>%
  select(year, locationdesc, data_value, treated, post)


required_years <- 2011:2022

valid_divisions_strict <- obesity_df %>%
  group_by(locationdesc) %>%
  summarise(n_years = n_distinct(year),
            years = list(unique(year))) %>%
  filter(n_years == length(required_years)) %>%
  pull(locationdesc)

obesity_df_strict <- obesity_df %>% filter(year < 2023) %>%
  filter(locationdesc %in% valid_divisions_strict) 

library(modelsummary)
model <- lm(data_value ~ treated * post + factor(locationdesc) + factor(year), data = obesity_df_strict)


modelsummary(model,
  title = "Difference-in-Differences: Effect of Soda Tax on Obesity",
  coef_map = c(
    "treated" = "Philadelphia (Treated)",
    "post" = "Post-2017",
    "treated:post" = "Treated × Post (DiD Estimate)"
  ),
  gof_omit = "Adj|AIC|BIC|Log|F|RMSE", 
  statistic = "({std.error})",      
  stars = TRUE
)
summary(model)
ggplot(obesity_df_strict, aes(x = year, y = data_value, color = as.factor(treated))) +
  stat_summary(fun = mean, geom = "line") +
  geom_vline(xintercept = 2017, linetype = "dashed", color = "gray") +
  labs(title = "Obesity Trends by MMSA (BMI ≥ 30)",
       y = "Obesity Rate", x = "Year", color = "Philadelphia") +
  theme_minimal() +geom_smooth()
```

```{r}
library (survey)
library (haven)
```
```{r}

dental_df <- brfss_division_filtered %>%
  filter(
    question == "Adults that have had any permanent teeth extracted (variable calculated from one or more BRFSS questions)",
    response == "Yes",
    break_out == "Overall"
  ) %>%
  select(year, locationdesc, data_value, treated, post)
dental_df <- dental_df %>%
  mutate(did = treated * post)
model_dental_fe <- lm(data_value ~ treated * post + factor(locationdesc) + factor(year), data = dental_df)
summary(model_dental_fe)


TestCount2 <- coeftest(model_dental_fe, vcov = vcovHAC(model_dental_fe))
TestCount2

ggplot(dental_df, aes(x = year, y = data_value, color = as.factor(treated))) +
  stat_summary(fun = mean, geom = "line") +
  geom_vline(xintercept = 2017, linetype = "dashed", color = "gray") +
  labs(title = "Tooth Extraction Trends: Treated vs Control Divisions",
       y = "% Adults with Any Teeth Extracted",
       x = "Year",
       color = "Philadelphia") +
  theme_minimal()
```


```{r}

diabetes_df <- brfss_division_filtered %>%
  filter(
    question == "Have you ever been told by a doctor that you have diabetes?",
    response == "Yes",
    break_out == "Overall"
  ) %>%
  select(year, locationdesc, data_value, treated, post)
diabetes_df <- diabetes_df %>%
  mutate(did = treated * post)
model_diabetes_fe <- lm(data_value ~ treated * post + factor(locationdesc) + factor(year), data = diabetes_df)
summary(model_diabetes_fe)
modelsummary(model_diabetes_fe,
  title = "Difference-in-Differences: Effect of Soda Tax on Diabetes",
  coef_map = c(
    "treated" = "Philadelphia (Treated)",
    "post" = "Post-2017",
    "treated:post" = "Treated × Post (DiD Estimate)"
  ),
  gof_omit = "Adj|AIC|BIC|Log|F|RMSE", 
  statistic = "({std.error})",      
  stars = TRUE
)
ggplot(diabetes_df, aes(x = year, y = data_value, color = as.factor(treated))) +
  stat_summary(fun = mean, geom = "line") +
  geom_vline(xintercept = 2017, linetype = "dashed", color = "gray") +
  labs(title = "Diabetes Trends: Treated vs Control Divisions",
       y = "% Adults with diabetes",
       x = "Year",
       color = "Philadelphia") +
  theme_minimal()
```

# ```{r}
# brfss_nat_obese <- brfss_nat %>%
#   filter(
#     Question == "Weight classification by Body Mass Index (BMI) (variable calculated from one or more BRFSS questions)",
#     Response == "Obese (BMI 30.0 - 99.8)",
#     Break_Out == "Overall"
#   ) %>%
#   select(Year, Locationdesc, Data_value)
# 
# ggplot(brfss_nat_obese, aes(x = Year, y = Data_value, color = as.factor(Treated))) +
#   stat_summary(fun = mean, geom = "line") +
#   geom_vline(xintercept = 2017, linetype = "dashed", color = "gray") +
#   labs(title = "Diabetes Trends: Treated vs Control Divisions",
#        y = "% Adults with diabetes",
#        x = "Year",
#        color = "Philadelphia") +
#   theme_minimal()
# 
# ```

